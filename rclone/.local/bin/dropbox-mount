#!/usr/bin/env bash
# Mount Dropbox with selective folder visibility

set -euo pipefail

MOUNT_DIR="$HOME/Dropbox/Mount"
INCLUDE_FILE="$HOME/.config/rclone/mount-includes.txt"
REMOTE="dropbox:"

# Ensure mount directory exists
if [[ ! -d "$MOUNT_DIR" ]]; then
    echo "→ Creating mount directory: $MOUNT_DIR"
    mkdir -p "$MOUNT_DIR"
fi

# Check for stale mount and clean it up
if mountpoint -q "$MOUNT_DIR" 2>/dev/null; then
    # Check if mount is actually working by trying to access it
    if ! timeout 2 ls "$MOUNT_DIR" &>/dev/null; then
        echo "→ Detected stale mount, cleaning up..."
        if command -v fusermount3 &>/dev/null; then
            fusermount3 -u "$MOUNT_DIR" 2>/dev/null || true
        elif command -v fusermount &>/dev/null; then
            fusermount -u "$MOUNT_DIR" 2>/dev/null || true
        fi
        sleep 1
    else
        echo "✓ Dropbox is already mounted at $MOUNT_DIR"
        exit 0
    fi
fi

# Check if rclone is configured
if ! rclone listremotes | grep -q "^${REMOTE}$"; then
    echo "✗ Dropbox remote not configured. Run: rclone config"
    echo "  1. Choose 'n' for new remote"
    echo "  2. Name it 'dropbox'"
    echo "  3. Choose 'dropbox' as the storage type"
    echo "  4. Follow the OAuth flow"
    exit 1
fi

# Check if include file exists
if [[ ! -f "$INCLUDE_FILE" ]]; then
    echo "✗ Include patterns file not found: $INCLUDE_FILE"
    echo "  Run: stow rclone (from ~/.dotfiles)"
    exit 1
fi

echo "→ Mounting Dropbox to $MOUNT_DIR..."
echo "  Visible folders:"
grep -v '^#' "$INCLUDE_FILE" | grep -v '^$' | sed 's/^/    /'

# Mount with selective visibility and minimal caching
# Log file for debugging: ~/.cache/rclone/dropbox-mount.log
LOG_FILE="$HOME/.cache/rclone/dropbox-mount.log"
mkdir -p "$(dirname "$LOG_FILE")"

rclone mount "$REMOTE" "$MOUNT_DIR" \
    --include-from "$INCLUDE_FILE" \
    --vfs-cache-mode minimal \
    --vfs-cache-max-size 2G \
    --vfs-cache-max-age 24h \
    --daemon \
    --log-level INFO \
    --log-file "$LOG_FILE"

# Wait a moment for mount to establish
sleep 2

# Verify mount succeeded and is accessible
if mountpoint -q "$MOUNT_DIR" && timeout 5 ls "$MOUNT_DIR" &>/dev/null; then
    echo "✓ Dropbox mounted successfully at $MOUNT_DIR"
    echo "  Cache: 2GB max, 24h retention"
    echo "  Logs: $LOG_FILE"
    echo "  Run 'dropbox-unmount' to unmount"
else
    echo "✗ Failed to mount Dropbox"
    echo "  Check logs: $LOG_FILE"
    echo "  Last few log lines:"
    tail -10 "$LOG_FILE" 2>/dev/null | sed 's/^/    /'
    exit 1
fi