#!/usr/bin/env bash
# Connect to iMac via VNC with optimized settings
# Automatically starts VNC server on iMac if not running
#
# Required environment variables:
#   IMAC_IP      - Tailscale IP of iMac
#   IMAC_USER    - Username on iMac
# Optional:
#   VNC_PORT     - VNC port (default: 5900)

set -euo pipefail

# Read environment variables
IMAC_IP="${IMAC_IP:-}"
IMAC_USER="${IMAC_USER:-}"
VNC_PORT="${VNC_PORT:-5900}"

# Validate required variables
if [[ -z "$IMAC_IP" ]]; then
    echo "Error: IMAC_IP environment variable is required"
    echo "Example: export IMAC_IP=100.x.x.x"
    exit 1
fi

if [[ -z "$IMAC_USER" ]]; then
    echo "Error: IMAC_USER environment variable is required"
    echo "Example: export IMAC_USER=username"
    exit 1
fi

echo "Connecting to iMac VNC..."

# Check if VNC server is already running
if ssh "${IMAC_USER}@${IMAC_IP}" 'pgrep -x wayvnc > /dev/null'; then
    echo "VNC server already running on iMac"
else
    echo "Starting VNC server on iMac..."

    # Try using the helper script first
    if ssh "${IMAC_USER}@${IMAC_IP}" 'command -v imac-vnc-start > /dev/null'; then
        ssh "${IMAC_USER}@${IMAC_IP}" 'imac-vnc-start' &
    else
        # Fallback to legacy command if script not deployed
        echo "Note: Helper scripts not deployed on iMac, using legacy command"
        ssh "${IMAC_USER}@${IMAC_IP}" 'systemctl --user stop hypridle 2>/dev/null; WAYLAND_DISPLAY=wayland-1 nohup wayvnc --gpu --max-fps=120 0.0.0.0 5900 > /dev/null 2>&1 &'
    fi

    # Give VNC server time to start
    echo "Waiting for server to start..."
    sleep 3
fi

# Connect with Remmina (suppress plugin warnings)
echo "Launching Remmina..."
remmina -c "vnc://${IMAC_IP}:${VNC_PORT}" 2>/dev/null &

echo ""
echo "To disconnect and stop VNC server:"
echo "  ssh ${IMAC_USER}@${IMAC_IP} 'imac-vnc-stop'"
