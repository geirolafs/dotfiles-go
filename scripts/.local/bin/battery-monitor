#!/bin/bash

# Battery Monitor for MacBook Pro on Asahi Linux
# Provides multi-level alerts and prevents unexpected shutdowns
# Uses UPower monitoring instead of polling for better efficiency

set -euo pipefail

# Configuration
readonly BATTERY_PATH="/org/freedesktop/UPower/devices/battery_macsmc_battery"
readonly CRITICAL_THRESHOLD=5   # Immediate action needed
readonly LOW_THRESHOLD=10       # Warning
readonly MEDIUM_THRESHOLD=20    # Heads-up notification

# Notification flag directory
readonly FLAG_DIR="/run/user/$UID"
readonly CRITICAL_FLAG="$FLAG_DIR/battery_critical_notified"
readonly LOW_FLAG="$FLAG_DIR/battery_low_notified"
readonly MEDIUM_FLAG="$FLAG_DIR/battery_medium_notified"

# Logging
log_message() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Check if upower is available
if ! command -v upower >/dev/null 2>&1; then
  log_message "ERROR: upower not found. Install it: sudo pacman -S upower"
  exit 1
fi

# Check if notify-send is available
if ! command -v notify-send >/dev/null 2>&1; then
  log_message "ERROR: notify-send not found. Install it: sudo pacman -S libnotify"
  exit 1
fi

# Get battery percentage
get_battery_percentage() {
  upower -i "$BATTERY_PATH" \
  | awk -F: '/percentage/ {
      gsub(/[%[:space:]]/, "", $2);
      val=$2;
      printf("%d\n", (val+0.5))
      exit
    }'
}

# Get battery state
get_battery_state() {
  upower -i "$BATTERY_PATH" | grep -E "^\s*state:" | awk '{print $2}'
}

# Get time to empty
get_time_to_empty() {
  upower -i "$BATTERY_PATH" | grep -E "time to empty" | awk -F: '{print $2}' | xargs
}

# Send notification with appropriate urgency
send_notification() {
  local urgency="$1"
  local title="$2"
  local message="$3"
  local icon="$4"
  local timeout="$5"

  notify-send -u "$urgency" "$title" "$message" -i "$icon" -t "$timeout"
  log_message "Sent notification: [$urgency] $title - $message"
}

# Clear all notification flags
clear_all_flags() {
  rm -f "$CRITICAL_FLAG" "$LOW_FLAG" "$MEDIUM_FLAG"
  log_message "Cleared all notification flags (battery charging or charged)"
}

# Main monitoring loop
monitor_battery() {
  log_message "Starting battery monitor for MacBook Pro"
  log_message "Thresholds: Critical=$CRITICAL_THRESHOLD%, Low=$LOW_THRESHOLD%, Medium=$MEDIUM_THRESHOLD%"

  while true; do
    BATTERY_LEVEL=$(get_battery_percentage)
    BATTERY_STATE=$(get_battery_state)
    TIME_TO_EMPTY=$(get_time_to_empty)

    # Clear flags if charging or fully charged
    if [[ "$BATTERY_STATE" != "discharging" ]]; then
      if [[ -f "$CRITICAL_FLAG" || -f "$LOW_FLAG" || -f "$MEDIUM_FLAG" ]]; then
        clear_all_flags
      fi
      sleep 30
      continue
    fi

    # Critical level (5% or below) - URGENT
    if [[ "$BATTERY_LEVEL" -le "$CRITICAL_THRESHOLD" ]]; then
      if [[ ! -f "$CRITICAL_FLAG" ]]; then
        send_notification "critical" \
          "üö® CRITICAL: Battery at ${BATTERY_LEVEL}%!" \
          "System will shutdown soon! Plug in charger immediately!\nTime remaining: ${TIME_TO_EMPTY:-Unknown}" \
          "battery-caution-symbolic" \
          0  # Never expire

        touch "$CRITICAL_FLAG"

        # Play alert sound if available
        if command -v paplay >/dev/null 2>&1 && [[ -f /usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga ]]; then
          paplay /usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga &
        fi
      fi

    # Low level (10% or below) - WARNING
    elif [[ "$BATTERY_LEVEL" -le "$LOW_THRESHOLD" ]]; then
      if [[ ! -f "$LOW_FLAG" ]]; then
        send_notification "critical" \
          "‚ö†Ô∏è  Battery Low: ${BATTERY_LEVEL}%" \
          "Please plug in your charger soon.\nTime remaining: ${TIME_TO_EMPTY:-Unknown}" \
          "battery-low-symbolic" \
          30000  # 30 seconds

        touch "$LOW_FLAG"
        rm -f "$MEDIUM_FLAG"  # Clear medium flag
      fi

    # Medium level (20% or below) - INFO
    elif [[ "$BATTERY_LEVEL" -le "$MEDIUM_THRESHOLD" ]]; then
      if [[ ! -f "$MEDIUM_FLAG" ]]; then
        send_notification "normal" \
          "üîã Battery at ${BATTERY_LEVEL}%" \
          "Consider plugging in your charger.\nTime remaining: ${TIME_TO_EMPTY:-Unknown}" \
          "battery-good-symbolic" \
          10000  # 10 seconds

        touch "$MEDIUM_FLAG"
      fi
    fi

    # Check every 30 seconds
    sleep 30
  done
}

# Handle script termination
cleanup() {
  log_message "Battery monitor stopped"
  exit 0
}

trap cleanup EXIT INT TERM

# Start monitoring
monitor_battery